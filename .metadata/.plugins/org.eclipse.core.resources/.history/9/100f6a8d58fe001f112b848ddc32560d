package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import beans.Register;
import beans.Task;
import factory.DBConn;

public class ToDoDAOImpl implements ToDoDAO {
	
	Connection con;
	Statement stmt;
	PreparedStatement pstmt1, pstmt2, pstmt3, pstmt4;
	ResultSet rs;
	static ToDoDAO toDoDAO;	

	private ToDoDAOImpl() {
		try {
			con = DBConn.getConn();
			stmt = con.createStatement();
			pstmt1 = con.prepareStatement("INSERT INTO register (fname, lname, email, pass, mobile, address) VALUES (?, ?, ?, ?, ?, ?)");

			pstmt2 = con.prepareStatement("INSERT INTO tasks VALUES(?,?,?,?,?)");
			pstmt3 = con.prepareStatement("INSERT INTO taskid_pks VALUES(?,?)");
			pstmt4 = con.prepareStatement("UPDATE taskid_pks SET taskid=? WHERE regid=?");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// to return singleton object
	public static ToDoDAO getInstance() {
		if (toDoDAO == null)
			toDoDAO = new ToDoDAOImpl();
		return toDoDAO;
	}
	@Override
	public String getFLNameByRegID(int regId) {
	    String fullName = null;
	    try {
	        rs = stmt.executeQuery("SELECT fname, lname FROM register WHERE regid=" + regId);
	        if (rs.next()) {
	            fullName = rs.getString("fname") + " " + rs.getString("lname");
	        }
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	    return fullName;
	}

	@Override
	public int register(Register reg) {
	    int regid = 0;
	    try {
	        con.setAutoCommit(false);
	        System.out.println("Preparing to insert user into database...");

	        pstmt1.setString(1, reg.getFname());
	        pstmt1.setString(2, reg.getLname());
	        pstmt1.setString(3, reg.getEmail());
	        pstmt1.setString(4, reg.getPass());
	        pstmt1.setLong(5, reg.getMobile());
	        pstmt1.setString(6, reg.getAddress());

	        int i = pstmt1.executeUpdate();
	        System.out.println("Query executed, affected rows: " + i);

	        if (i == 1) {
	            System.out.println("Record inserted successfully.");

	            rs = stmt.executeQuery("SELECT LAST_INSERT_ID()");
	            if (rs.next()) {
	                regid = rs.getInt(1);
	                System.out.println("Generated regid: " + regid);
	            }

	            con.commit();
	        } else {
	            System.out.println("Insert failed, rolling back.");
	            con.rollback();
	        }
	    } catch (Exception e) {
	        System.out.println("ðŸ”´ ERROR: " + e.getMessage());  // Print error details
	        e.printStackTrace();
	        try {
	            con.rollback();
	        } catch (Exception rollbackEx) {
	            rollbackEx.printStackTrace();
	        }
	        return -1;
	    }
	    return regid;
	}
	
	@Override
	public int login(String email, String pass) {
	    int regId = 0;
	    try {
	        String query = "SELECT regid FROM register WHERE email = ? AND pass = ?";
	        PreparedStatement pstmt = con.prepareStatement(query);
	        pstmt.setString(1, email);
	        pstmt.setString(2, pass);
	        rs = pstmt.executeQuery();
	        
	        if (rs.next()) {
	            regId = rs.getInt(1);
	        }
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	    return regId;
	}


	@Override
	public boolean addTask(Task task, int regid) {
	    int taskId = 0;
	    boolean isNew = true;
	    int i = 0, j = 0;
	    try {
	        rs = stmt.executeQuery("SELECT taskid FROM taskid_pks WHERE regid=" + regid);
	        if (rs.next()) {
	            isNew = false;
	            taskId = rs.getInt(1);
	        }
	        taskId++;

	        con.setAutoCommit(false);
	        pstmt2.setInt(1, taskId);
	        pstmt2.setString(2, task.getTaskName());
	        pstmt2.setString(3, task.getTaskDate());
	        pstmt2.setInt(4, task.getTaskStatus());
	        pstmt2.setInt(5, task.getTaskregid());
	        i = pstmt2.executeUpdate();

	        if (isNew) {
	            pstmt3.setInt(1, task.getTaskregid());
	            pstmt3.setInt(2, taskId);
	            j = pstmt3.executeUpdate();
	        } else {
	            pstmt4.setInt(1, taskId);
	            pstmt4.setInt(2, task.getTaskregid());
	            j = pstmt4.executeUpdate();
	        }

	        if (i == 1 && j == 1) {
	            con.commit();
	            return true;  // âœ… Return true if successful
	        } else {
	            con.rollback();
	        }
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	    return false;
	}
	

	@Override
	public List<Task> findAllTasksByRegid(int regid) {
		// TODO Auto-generated method stub
		List<Task> taskList = new ArrayList<Task>();
		try {
			rs = stmt.executeQuery("select * from tasks where regid=" + regid);
			while (rs.next()) {
				Task task = new Task(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getInt(4), rs.getInt(5));
				taskList.add(task);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return taskList;
	}

	@Override
	public boolean markTaskCompleted(int taskid, int regid) {
		// TODO Auto-generated method stub
		boolean flag = false;
		try {
			int i = stmt.executeUpdate("update tasks set taskstatus=3 where regid=" + regid + " and taskid=" + taskid);
			if (i == 1) {
				flag = true;
				System.out.println("Task " + taskid + " of " + regid + " completed");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return flag;
	}

}
